{"version":3,"sources":["webpack:///./src/pages/returnreview.js"],"names":["ReturnReview","props","itemsMap","Map","set","state","action","items","handleInputChange","bind","handleBlur","handleSubmit","event","target","value","name","this","checked","setState","alert","keys","key","mystring","skey","get","navigate","preventDefault","render","title","onSubmit","method","style","display","htmlFor","type","id","defaultChecked","onChange","size","placeholder","onBlur","to","React","Component"],"mappings":"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","file":"component---src-pages-returnreview-js-b8b13d28e21b5d3c60cb.js","sourcesContent":["import React from \"react\"\nimport { Link, navigate } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nexport default class ReturnReview extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const itemsMap = new Map()\n    itemsMap.set(\"123\", true)\n    itemsMap.set(\"456\", true)\n\n    this.state = {\n      action: \"\",\n      items: itemsMap,\n    }\n\n    this.handleInputChange = this.handleInputChange.bind(this)\n    this.handleBlur = this.handleBlur.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleInputChange(event) {\n    const target = event.target\n    const value = target.value\n    const name = target.name\n\n    if (name === \"itemId\") {\n      const itemsMap = this.state.items\n      if (target.checked) {\n        itemsMap.set(value, true)\n      } else {\n        itemsMap.set(value, false)\n      }\n    } else {\n      this.setState({\n        [name]: value,\n      })\n    }\n  }\n\n  handleBlur(event) {\n    const itemsMap = this.state.items\n\n    if (this.state.action === \"process\") {\n      //do nothing\n    } else if (this.state.action === \"skip\") {\n      for (var key of itemsMap.keys()) {\n        itemsMap.set(key, false)\n      }\n    } else {\n      alert(`need to enter in skip or process`)\n      return\n    }\n\n    let mystring = \"\"\n    for (var skey of itemsMap.keys()) {\n      mystring += `[${skey} , ${itemsMap.get(skey)}] `\n    }\n    alert(`Call api/OmsRmaInboundReturn (${mystring} )`) //Need to only make call on items that are true\n\n    navigate(\"/returnconfirmation\") // Need to pass the state of the API call to the next page\n    // state { token , action, selected items, unseleced items}\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n  }\n\n  render() {\n    return (\n      <Layout>\n        <SEO title=\"ReturnReview\" />\n        <h1>Order Review Screen</h1>\n        <table>\n          <tbody>\n            <tr>\n              <td>\n                <b>Order Number</b>\n              </td>\n              <td>9283745298</td>\n            </tr>\n            {/* OrderNumber in OMS */}\n            <tr>\n              <td>\n                <b>Order Date</b>\n              </td>\n              <td>03/18/2020</td>\n            </tr>\n            {/* OrderDate in OMS */}\n            <tr>\n              <td>\n                <b>Order Status Code</b>\n              </td>\n              <td>Completed or Manual Review</td>\n            </tr>\n            {/* OrderStatusCode in OMS */}\n            <tr>\n              <td>\n                <b>Customer Id</b>\n              </td>\n              <td>5986743</td>\n            </tr>\n            {/* CustomerId in OMS */}\n          </tbody>\n        </table>\n\n        <form onSubmit={this.handleSubmit} method=\"POST\">\n          <table>\n            <thead>\n              <tr>\n                <th>Select</th>\n                <th>\n                  Order Item Id\n                  <div style={{ display: \"none\" }}> ID in OMS </div>\n                </th>\n                <th>\n                  SKU\n                  <div style={{ display: \"none\" }}>\n                    SKU in OMS and mapped to SAP_MaterialNumber\n                  </div>\n                </th>\n                <th>\n                  Product Name\n                  <div style={{ display: \"none\" }}> Custom 2 in OMS </div>\n                  <div style={{ display: \"none\" }}>\n                    Do we want the scene 7 URL\n                  </div>\n                </th>\n                <th>\n                  Color\n                  <div style={{ display: \"none\" }}> StyleNumber in OMS </div>\n                </th>\n                <th>\n                  Size\n                  <div style={{ display: \"none\" }}> ProductSize in OMS </div>\n                </th>\n                <th>\n                  Quantiy\n                  <div style={{ display: \"none\" }}> Quantity in OMS </div>\n                </th>\n                <th>\n                  Status\n                  <div style={{ display: \"none\" }}> ItemStatusName in OMS </div>\n                </th>\n                <th>\n                  RmaNumber\n                  <div style={{ display: \"none\" }}>\n                    Rmaorder.OrderNumber ???? in OMS\n                  </div>\n                  <div style={{ display: \"none\" }}>\n                    Do we need isRMACanceled ???\n                  </div>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <label htmlFor=\"itemId\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"itemId1\"\n                      name=\"itemId\"\n                      value=\"123\"\n                      defaultChecked\n                      onChange={this.handleInputChange}\n                    />\n                  </label>\n                </td>\n                <td>9871</td>\n                <td>123</td>\n                <td>BleroForm LS Shirt</td>\n                <td>Green</td>\n                <td>XL</td>\n                <td>1</td>\n                <td>Pending Return</td>\n                <td>987</td>\n              </tr>\n              <tr>\n                <td>-</td>\n                <td>9872</td>\n                <td>234</td>\n                <td>Men's Jacket</td>\n                <td>Red</td>\n                <td>XL</td>\n                <td>1</td>\n                <td>Cancelled</td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>-</td>\n                <td>9873</td>\n                <td>345</td>\n                <td>Men's 5th and F Pants</td>\n                <td>Black</td>\n                <td>36</td>\n                <td>1</td>\n                <td>Returned</td>\n                <td>345</td>\n              </tr>\n              <tr>\n                <td>\n                  <label htmlFor=\"itemId\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"itemId2\"\n                      name=\"itemId\"\n                      value=\"456\"\n                      defaultChecked\n                      onChange={this.handleInputChange}\n                    />\n                  </label>\n                </td>\n                <td>9874</td>\n                <td>456</td>\n                <td>Men's Blarch Block Pants</td>\n                <td>Black</td>\n                <td>36</td>\n                <td>1</td>\n                <td>Pending Return</td>\n                <td>987</td>\n              </tr>\n            </tbody>\n          </table>\n          <p>\n            <span>\n              <b>\n                Please check the box for the items selected above. If items are\n                missing, broken, or incorrect please uncheck those items. <br />\n                If all items are missing, broken or incorrect, please scan the\n                skip barcode and the page will advance doing no processing.\n              </b>\n            </span>\n          </p>\n          <label htmlFor=\"action\">\n            <input\n              type=\"text\"\n              id=\"action\"\n              name=\"action\"\n              size=\"40\"\n              placeholder=\"scan bar code for process or skip\"\n              value={this.state.action}\n              onChange={this.handleInputChange}\n              onBlur={this.handleBlur}\n            />\n          </label>\n          <br />\n          <br />\n        </form>\n        <br />\n        <h3>Notes:</h3>\n\n        <ol>\n          <li>\n            The items table above is generated from parsing the json respons\n            from the <i>api/OmsOrderHistory</i>\n          </li>\n          <li>\n            The returns specialist will use the gun to scan either\n            <b>process</b> or <b>skip</b> bar code, and that will submit the\n            form.\n          </li>\n          <li>If item is unchecked than it will stay in Pending Return</li>\n          <li>\n            Scanning <b>skip</b> will do nothing except forward to a screen\n            reminding the Returns specalist to update the items in OMS UI\n          </li>\n          <li>\n            Scanning <b>process</b> will send all checked items as\n            <b>returned</b> via <i>api/OmsRmaInboundReturn</i> <br />\n            and all uncheked items wil be skipped and returns specialist will be\n            asked to go into OMS UI to update them.\n          </li>\n        </ol>\n\n        {/* \n        End of Custom HTML\n*/}\n        <Link to=\"/\">Go back to the homepage</Link>\n      </Layout>\n    )\n  }\n}\n"],"sourceRoot":""}