{"version":3,"sources":["webpack:///./src/pages/returnreview.js"],"names":["ReturnReview","props","itemsMap","Map","set","state","action","items","handleInputChange","bind","handleBlur","event","target","value","name","this","checked","setState","alert","keys","key","mystring","skey","get","navigate","render","title","onSubmit","method","style","display","htmlFor","type","id","defaultChecked","onChange","size","placeholder","onBlur","to","React","Component"],"mappings":"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","file":"component---src-pages-returnreview-js-bfd7ef44b8ae6f67ef80.js","sourcesContent":["import React from \"react\"\r\nimport { Link, navigate } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nexport default class ReturnReview extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const itemsMap = new Map()\r\n    itemsMap.set(\"123\", true)\r\n    itemsMap.set(\"456\", true)\r\n\r\n    this.state = {\r\n      action: \"\",\r\n      items: itemsMap,\r\n    }\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this)\r\n    this.handleBlur = this.handleBlur.bind(this)\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target\r\n    const value = target.value\r\n    const name = target.name\r\n\r\n    if (name === \"itemId\") {\r\n      const itemsMap = this.state.items\r\n      if (target.checked) {\r\n        itemsMap.set(value, true)\r\n      } else {\r\n        itemsMap.set(value, false)\r\n      }\r\n    } else {\r\n      this.setState({\r\n        [name]: value,\r\n      })\r\n    }\r\n  }\r\n\r\n  handleBlur(event) {\r\n    const itemsMap = this.state.items\r\n\r\n    if (this.state.action === \"process\") {\r\n      //do nothing\r\n    } else if (this.state.action === \"skip\") {\r\n      for (var key of itemsMap.keys()) {\r\n        itemsMap.set(key, false)\r\n      }\r\n    } else {\r\n      alert(`need to enter in skip or process`)\r\n      return\r\n    }\r\n\r\n    let mystring = \"\"\r\n    for (var skey of itemsMap.keys()) {\r\n      mystring += `[${skey} , ${itemsMap.get(skey)}] `\r\n    }\r\n    alert(`Call api/OmsRmaInboundReturn (${mystring} )`) //Need to only make call on items that are true\r\n\r\n    navigate(\"/returnconfirmation\") // Need to pass the state of the API call to the next page\r\n    // state { token , action, selected items, unseleced items}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <SEO title=\"ReturnReview\" />\r\n        <h1>Order Review Screen</h1>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <b>Order Number</b>\r\n              </td>\r\n              <td>9283745298</td>\r\n            </tr>\r\n            {/* OrderNumber in OMS */}\r\n            <tr>\r\n              <td>\r\n                <b>Order Date</b>\r\n              </td>\r\n              <td>03/18/2020</td>\r\n            </tr>\r\n            {/* OrderDate in OMS */}\r\n            <tr>\r\n              <td>\r\n                <b>Order Status Code</b>\r\n              </td>\r\n              <td>Completed or Manual Review</td>\r\n            </tr>\r\n            {/* OrderStatusCode in OMS */}\r\n            <tr>\r\n              <td>\r\n                <b>Customer Id</b>\r\n              </td>\r\n              <td>5986743</td>\r\n            </tr>\r\n            {/* CustomerId in OMS */}\r\n          </tbody>\r\n        </table>\r\n\r\n        <form onSubmit={this.handleBlur} method=\"POST\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Select</th>\r\n                <th>\r\n                  Order Item Id\r\n                  <div style={{ display: \"none\" }}> ID in OMS </div>\r\n                </th>\r\n                <th>\r\n                  SKU\r\n                  <div style={{ display: \"none\" }}>\r\n                    SKU in OMS and mapped to SAP_MaterialNumber\r\n                  </div>\r\n                </th>\r\n                <th>\r\n                  Product Name\r\n                  <div style={{ display: \"none\" }}> Custom 2 in OMS </div>\r\n                  <div style={{ display: \"none\" }}>\r\n                    Do we want the scene 7 URL\r\n                  </div>\r\n                </th>\r\n                <th>\r\n                  Color\r\n                  <div style={{ display: \"none\" }}> StyleNumber in OMS </div>\r\n                </th>\r\n                <th>\r\n                  Size\r\n                  <div style={{ display: \"none\" }}> ProductSize in OMS </div>\r\n                </th>\r\n                <th>\r\n                  Quantiy\r\n                  <div style={{ display: \"none\" }}> Quantity in OMS </div>\r\n                </th>\r\n                <th>\r\n                  Status\r\n                  <div style={{ display: \"none\" }}> ItemStatusName in OMS </div>\r\n                </th>\r\n                <th>\r\n                  RmaNumber\r\n                  <div style={{ display: \"none\" }}>\r\n                    Rmaorder.OrderNumber ???? in OMS\r\n                  </div>\r\n                  <div style={{ display: \"none\" }}>\r\n                    Do we need isRMACanceled ???\r\n                  </div>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <label htmlFor=\"itemId\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"itemId1\"\r\n                      name=\"itemId\"\r\n                      value=\"123\"\r\n                      defaultChecked\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                  </label>\r\n                </td>\r\n                <td>9871</td>\r\n                <td>123</td>\r\n                <td>BleroForm LS Shirt</td>\r\n                <td>Green</td>\r\n                <td>XL</td>\r\n                <td>1</td>\r\n                <td>Pending Return</td>\r\n                <td>987</td>\r\n              </tr>\r\n              <tr>\r\n                <td>-</td>\r\n                <td>9872</td>\r\n                <td>234</td>\r\n                <td>Men's Jacket</td>\r\n                <td>Red</td>\r\n                <td>XL</td>\r\n                <td>1</td>\r\n                <td>Cancelled</td>\r\n                <td></td>\r\n              </tr>\r\n              <tr>\r\n                <td>-</td>\r\n                <td>9873</td>\r\n                <td>345</td>\r\n                <td>Men's 5th and F Pants</td>\r\n                <td>Black</td>\r\n                <td>36</td>\r\n                <td>1</td>\r\n                <td>Returned</td>\r\n                <td>345</td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <label htmlFor=\"itemId\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"itemId2\"\r\n                      name=\"itemId\"\r\n                      value=\"456\"\r\n                      defaultChecked\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                  </label>\r\n                </td>\r\n                <td>9874</td>\r\n                <td>456</td>\r\n                <td>Men's Blarch Block Pants</td>\r\n                <td>Black</td>\r\n                <td>36</td>\r\n                <td>1</td>\r\n                <td>Pending Return</td>\r\n                <td>987</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <p>\r\n            <span>\r\n              <b>\r\n                Please check the box for the items selected above. If items are\r\n                missing, broken, or incorrect please uncheck those items. <br />\r\n                If all items are missing, broken or incorrect, please scan the\r\n                skip barcode and the page will advance doing no processing.\r\n              </b>\r\n            </span>\r\n          </p>\r\n          <label htmlFor=\"action\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"action\"\r\n              name=\"action\"\r\n              size=\"40\"\r\n              placeholder=\"scan bar code for process or skip\"\r\n              value={this.state.action}\r\n              onChange={this.handleInputChange}\r\n              onBlur={this.handleBlur}\r\n            />\r\n          </label>\r\n          <br />\r\n          <br />\r\n        </form>\r\n        <br />\r\n        <h3>Notes:</h3>\r\n\r\n        <ol>\r\n          <li>\r\n            The items table above is generated from parsing the json respons\r\n            from the <i>api/OmsOrderHistory</i>\r\n          </li>\r\n          <li>\r\n            The returns specialist will use the gun to scan either\r\n            <b>process</b> or <b>skip</b> bar code, and that will submit the\r\n            form.\r\n          </li>\r\n          <li>If item is unchecked than it will stay in Pending Return</li>\r\n          <li>\r\n            Scanning <b>skip</b> will do nothing except forward to a screen\r\n            reminding the Returns specalist to update the items in OMS UI\r\n          </li>\r\n          <li>\r\n            Scanning <b>process</b> will send all checked items as\r\n            <b>returned</b> via <i>api/OmsRmaInboundReturn</i> <br />\r\n            and all uncheked items wil be skipped and returns specialist will be\r\n            asked to go into OMS UI to update them.\r\n          </li>\r\n        </ol>\r\n\r\n        {/* \r\n        End of Custom HTML\r\n*/}\r\n        <Link to=\"/\">Go back to the homepage</Link>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}